language: php
.steps:
  - &composer_github_auth |
      githubTokenRateLimitRequest=`curl -H "Authorization: token 310659f0a8658693af9ccb9da8969584b598910a" https://api.github.com/rate_limit`
      githubTokenRateLimit=`echo $githubTokenRateLimitRequest | jq '.rate.remaining'`
      echo "Number of github api requests remaining is $githubTokenRateLimit"
      if [ "$githubTokenRateLimit" -gt 500 ]; then
        echo "Using composer github api token"
        composer config --global --auth github-oauth.github.com 310659f0a8658693af9ccb9da8969584b598910a
      else
        echo "Not using composer github api token"
      fi
  - &lint_style |
      failTest=false
      echo "--------------------------------------"
      echo "Checking for PHP styling (PSR-12) issues"
      echo "--------------------------------------"
      composer global require "squizlabs/php_codesniffer=3.*" || failTest=true
      $HOME/.config/composer/vendor/bin/phpcs -p -n --extensions=php,inc --report-width=120 --standard=ci/phpcs.xml --report=full . || failTest=true
      # todo clean up method visibility and other refactors in src/
      # $HOME/.config/composer/vendor/bin/phpcs -p -n --extensions=php,inc --report-width=120 --standard=ci/phpcs_src.xml --report=full src/ || failTest=true

      if $failTest; then
        failJob=true
        mes="FAILED"
      else
        mes="PASSED"
      fi
      echo "-----------------------------------------------"
      jobTest="${mes} - Checking for PHP styling (PSR-12) issues"
      jobTests+="${jobTest}\n"
      echo "${jobTest}"
      echo "-----------------------------------------------"
  - &lint_theme_style |
      failTest=false
      echo "--------------------------------------"
      echo "Checking for PHP theme styling issues"
      echo "--------------------------------------"
      npm install || failTest=true
      npx stylelint "**/*.css" || failTest=true
      npx stylelint "**/*.scss" || failTest=true
      if $failTest; then
        failJob=true
        mes="FAILED"
      else
        mes="PASSED"
      fi
      echo "-----------------------------------------------"
      jobTest="${mes} - Checking for PHP theme styling issues"
      jobTests+="${jobTest}\n"
      echo "${jobTest}"
      echo "-----------------------------------------------"
  - &lint_syntax |
      failTest=false
      echo "------------------------------"
      echo "Checking for PHP syntax errors"
      echo "------------------------------"
      failSyntax=false
      if find . -type f -name "*.php" -exec php -d error_reporting=32767 -l {} \; 2>&1 >&- | grep "^"; then failSyntax=true; fi
      if find . -type f -name "*.inc" -exec php -d error_reporting=32767 -l {} \; 2>&1 >&- | grep "^"; then failSyntax=true; fi
      if $failSyntax; then
        failTest=true
      fi
      if $failTest; then
        failJob=true
        mes="FAILED"
      else
        mes="PASSED"
      fi
      echo "---------------------------------------"
      jobTest="${mes} - Checking for PHP syntax errors"
      jobTests+="${jobTest}\n"
      echo "${jobTest}"
      echo "---------------------------------------"
  - &dockers_env_start |
      failTest=false
      echo "---------------------------------------------------------------------"
      echo "Start up the appropriate testing docker system to allow testing below"
      echo "---------------------------------------------------------------------"
      cd ci/${DOCKER_DIR} || failTest=true
      docker-compose up -d || failTest=true
      cd ../../ || failTest=true
      if $failTest; then
        failJob=true
        mes="FAILED"
      else
        mes="PASSED"
      fi
      echo "------------------------------------------------------------------------------"
      jobTest="${mes} - Start up the appropriate testing docker system to allow testing below"
      jobTests+="${jobTest}\n"
      echo "${jobTest}"
      echo "------------------------------------------------------------------------------"
  - &main_build |
      failTest=false
      echo "------------------"
      echo "Main OpenEMR Build"
      echo "------------------"
      composer install || failTest=true
      npm install || failTest=true
      npm run build || failTest=true
      composer global require phing/phing || failTest=true
      $HOME/.config/composer/vendor/bin/phing vendor-clean || failTest=true
      $HOME/.config/composer/vendor/bin/phing assets-clean || failTest=true
      composer global remove phing/phing || failTest=true
      composer dump-autoload -o || failTest=true
      rm -fr node_modules || failTest=true
      if $failTest; then
        failJob=true
        mes="FAILED"
      else
        mes="PASSED"
      fi
      echo "---------------------------"
      jobTest="${mes} - Main OpenEMR Build"
      jobTests+="${jobTest}\n"
      echo "${jobTest}"
      echo "---------------------------"
  - &ccda_build |
      failTest=false
      echo "------------------"
      echo "CCDA OpenEMR Build"
      echo "------------------"
      cd ccdaservice || failTest=true
      npm install || failTest=true
      cd ../ || failTest=true
      if $failTest; then
        failJob=true
        mes="FAILED"
      else
        mes="PASSED"
      fi
      echo "---------------------------"
      jobTest="${mes} - CCDA OpenEMR Build"
      jobTests+="${jobTest}\n"
      echo "${jobTest}"
      echo "---------------------------"
  - &install_configure |
      failTest=false
      echo "----------------------------------------------------------------------------------------------"
      echo "Install and Configure OpenEMR for testing (remove registration modal on login and turn on api)"
      echo "----------------------------------------------------------------------------------------------"
      sudo chmod 666 sites/default/sqlconf.php || failTest=true
      sudo chmod -R 777 sites/default/documents || failTest=true
      sed -e 's@^exit;@ @' < contrib/util/installScripts/InstallerAuto.php > contrib/util/installScripts/InstallerAutoTemp.php || failTest=true
      docker exec -i $(docker ps | grep _openemr | cut -f 1 -d " ") sh -c "php -f ${OPENEMR_DIR}/contrib/util/installScripts/InstallerAutoTemp.php rootpass=root server=mysql loginhost=%" || failTest=true
      docker exec -i $(docker ps | grep _openemr | cut -f 1 -d " ") sh -c "rm -f ${OPENEMR_DIR}/contrib/util/installScripts/InstallerAutoTemp.php" || failTest=true
      docker exec -i $(docker ps | grep _openemr | cut -f 1 -d " ") sh -c 'mysql -u openemr --password="openemr" -h mysql -e "INSERT INTO product_registration (opt_out) VALUES (1)" openemr' || failTest=true
      docker exec -i $(docker ps | grep _openemr | cut -f 1 -d " ") sh -c 'mysql -u openemr --password="openemr" -h mysql -e "UPDATE globals SET gl_value = 1 WHERE gl_name = \"rest_api\"" openemr' || failTest=true
      docker exec -i $(docker ps | grep _openemr | cut -f 1 -d " ") sh -c 'mysql -u openemr --password="openemr" -h mysql -e "UPDATE globals SET gl_value = 1 WHERE gl_name = \"rest_fhir_api\"" openemr' || failTest=true
      docker exec -i $(docker ps | grep _openemr | cut -f 1 -d " ") sh -c 'mysql -u openemr --password="openemr" -h mysql -e "UPDATE globals SET gl_value = 1 WHERE gl_name = \"rest_portal_api\"" openemr' || failTest=true
      docker exec -i $(docker ps | grep _openemr | cut -f 1 -d " ") sh -c 'mysql -u openemr --password="openemr" -h mysql -e "UPDATE globals SET gl_value = 1 WHERE gl_name = \"rest_portal_fhir_api\"" openemr' || failTest=true
      if $failTest; then
        failJob=true
        mes="FAILED"
      else
        mes="PASSED"
      fi
      echo "-------------------------------------------------------------------------------------------------------"
      jobTest="${mes} - Install and Configure OpenEMR for testing (remove registration modal on login and turn on api)"
      jobTests+="${jobTest}\n"
      echo "${jobTest}"
      echo "-------------------------------------------------------------------------------------------------------"
  - &build_test_unit |
      failTest=false
      echo "---------------"
      echo "Run Unit Tests"
      echo "---------------"
      docker exec -i $(docker ps | grep _openemr | cut -f 1 -d " ") sh -c "cd ${OPENEMR_DIR}; php ${OPENEMR_DIR}/vendor/bin/phpunit --testsuite unit --testdox" || failTest=true
      if $failTest; then
        failJob=true
        mes="FAILED"
      else
        mes="PASSED"
      fi
      echo "-----------------------"
      jobTest="${mes} - Run Unit Tests"
      jobTests+="${jobTest}\n"
      echo "${jobTest}"
      echo "-----------------------"
  - &build_test_e2e |
      failTest=false
      echo "-------------"
      echo "Run E2e Tests"
      echo "-------------"
      docker exec -i $(docker ps | grep _openemr | cut -f 1 -d " ") sh -c "${CHROMIUM_INSTALL}; export PANTHER_NO_SANDBOX=1; cd ${OPENEMR_DIR}; php ${OPENEMR_DIR}/vendor/bin/phpunit --testsuite e2e --testdox" || failTest=true
      if $failTest; then
        failJob=true
        mes="FAILED"
      else
        mes="PASSED"
      fi
      echo "----------------------"
      jobTest="${mes} - Run E2e Tests"
      jobTests+="${jobTest}\n"
      echo "${jobTest}"
      echo "----------------------"
  - &build_test_api |
      failTest=false
      echo "-------------"
      echo "Run Api Tests"
      echo "-------------"
      docker exec -i $(docker ps | grep _openemr | cut -f 1 -d " ") sh -c "cd ${OPENEMR_DIR}; php ${OPENEMR_DIR}/vendor/bin/phpunit --testsuite api --testdox" || failTest=true
      if $failTest; then
        failJob=true
        mes="FAILED"
      else
        mes="PASSED"
      fi
      echo "----------------------"
      jobTest="${mes} - Run Api Tests"
      jobTests+="${jobTest}\n"
      echo "${jobTest}"
      echo "----------------------"
  - &build_test_fixtures |
      failTest=false
      echo "-------------"
      echo "Run Fixture Tests"
      echo "-------------"
      docker exec -i $(docker ps | grep _openemr | cut -f 1 -d " ") sh -c "cd ${OPENEMR_DIR}; php ${OPENEMR_DIR}/vendor/bin/phpunit --testsuite fixtures --testdox" || failTest=true
      if $failTest; then
        failJob=true
        mes="FAILED"
      else
        mes="PASSED"
      fi
      echo "----------------------"
      jobTest="${mes} - Run Fixture Tests"
      jobTests+="${jobTest}\n"
      echo "${jobTest}"
      echo "----------------------"
  - &build_test_services |
      failTest=false
      echo "-------------"
      echo "Run Service Tests"
      echo "-------------"
      docker exec -i $(docker ps | grep _openemr | cut -f 1 -d " ") sh -c "cd ${OPENEMR_DIR}; php ${OPENEMR_DIR}/vendor/bin/phpunit --testsuite services --testdox" || failTest=true
      if $failTest; then
        failJob=true
        mes="FAILED"
      else
        mes="PASSED"
      fi
      echo "----------------------"
      jobTest="${mes} - Run Service Tests"
      jobTests+="${jobTest}\n"
      echo "${jobTest}"
      echo "----------------------"
  - &build_test_validators |
      failTest=false
      echo "-------------"
      echo "Run Validator Tests"
      echo "-------------"
      docker exec -i $(docker ps | grep _openemr | cut -f 1 -d " ") sh -c "cd ${OPENEMR_DIR}; php ${OPENEMR_DIR}/vendor/bin/phpunit --testsuite validators --testdox" || failTest=true
      if $failTest; then
        failJob=true
        mes="FAILED"
      else
        mes="PASSED"
      fi
      echo "----------------------"
      jobTest="${mes} - Run Validator Tests"
      jobTests+="${jobTest}\n"
      echo "${jobTest}"
      echo "----------------------"
  - &build_test_controllers |
      failTest=false
      echo "-------------"
      echo "Run Controller Tests"
      echo "-------------"
      docker exec -i $(docker ps | grep _openemr | cut -f 1 -d " ") sh -c "cd ${OPENEMR_DIR}; php ${OPENEMR_DIR}/vendor/bin/phpunit --testsuite controllers --testdox" || failTest=true
      if $failTest; then
        failJob=true
        mes="FAILED"
      else
        mes="PASSED"
      fi
      echo "----------------------"
      jobTest="${mes} - Run Controller Tests"
      jobTests+="${jobTest}\n"
      echo "${jobTest}"
      echo "----------------------"
  - &build_test_common |
      failTest=false
      echo "-------------"
      echo "Run Common Tests"
      echo "-------------"
      docker exec -i $(docker ps | grep _openemr | cut -f 1 -d " ") sh -c "cd ${OPENEMR_DIR}; php ${OPENEMR_DIR}/vendor/bin/phpunit --testsuite common --testdox" || failTest=true
      if $failTest; then
        failJob=true
        mes="FAILED"
      else
        mes="PASSED"
      fi
      echo "----------------------"
      jobTest="${mes} - Run Common Tests"
      jobTests+="${jobTest}\n"
      echo "${jobTest}"
      echo "----------------------"
  - &job_summary_prep |
      if $failJob; then
        mes="FAILED"
      else
        mes="PASSED"
      fi
      jobSummary="--------------------------------------------\n"
      jobSummary+="--------------------------------------------\n"
      jobSummary+="${mes} - JOB SUMMARY\n"
      jobSummary+="--------------------------------------------\n"
      jobSummary+="${jobTests}"
      jobSummary+="--------------------------------------------"
before_install:
  - echo "extension=ldap.so" >>php --ini | grep "Loaded Configuration" | sed -e "s|.:\s||"``
before_script:
  - echo 'error_reporting = "E_ALL & ~E_NOTICE & ~E_STRICT"' >> ~/.phpenv/versions/$(phpenv version-name)/etc/conf.d/travis.ini
jobs:
  include:
    - name: 'Psr12 style'
      php: '7.4'
      script:
        - failJob=false
        - *composer_github_auth
        - *lint_style
        - *job_summary_prep
        - echo -e "${jobSummary}"
        - if $failJob; then travis_terminate 1; fi
    - name: 'Theme style'
      php: '7.4'
      script:
        - failJob=false
        - *lint_theme_style
        - *job_summary_prep
        - echo -e "${jobSummary}"
        - if $failJob; then travis_terminate 1; fi
    - name: 'Syntax - PHP 7.2'
      php: '7.2'
      script:
        - failJob=false
        - *lint_syntax
        - *job_summary_prep
        - echo -e "${jobSummary}"
        - if $failJob; then travis_terminate 1; fi
    - name: 'Syntax - PHP 7.3'
      php: '7.3'
      script:
        - failJob=false
        - *lint_syntax
        - *job_summary_prep
        - echo -e "${jobSummary}"
        - if $failJob; then travis_terminate 1; fi
    - name: 'Syntax - PHP 7.4'
      php: '7.4'
      script:
        - failJob=false
        - *lint_syntax
        - *job_summary_prep
        - echo -e "${jobSummary}"
        - if $failJob; then travis_terminate 1; fi
    - name: 'Syntax - PHP 8.0'
      php: 'nightly'
      script:
        - failJob=false
        - *lint_syntax
        - *job_summary_prep
        - echo -e "${jobSummary}"
        - if $failJob; then travis_terminate 1; fi
    - name: 'Build and test - PHP 7.3 - Apache - MariaDB 10.5'
      php: '7.3'
      env:
        - DOCKER_DIR=apache_73_105
        - OPENEMR_DIR=/var/www/localhost/htdocs/openemr
        - CHROMIUM_INSTALL="apk update; apk add --no-cache chromium chromium-chromedriver; export PANTHER_CHROME_DRIVER_BINARY=/usr/lib/chromium/chromedriver"
      script:
        - failJob=false
        - *dockers_env_start
        - *composer_github_auth
        - *main_build
        - *ccda_build
        - *install_configure
        - *build_test_unit
        - *build_test_e2e
        - *build_test_api
        - *build_test_fixtures
        - *build_test_services
        - *build_test_validators
        - *build_test_controllers
        - *build_test_common
        - *job_summary_prep
        - echo -e "${jobSummary}"
        - if $failJob; then travis_terminate 1; fi
    - name: 'Build and test - PHP 7.3 - Apache - MariaDB 10.4'
      php: '7.3'
      env:
        - DOCKER_DIR=apache_73_104
        - OPENEMR_DIR=/var/www/localhost/htdocs/openemr
        - CHROMIUM_INSTALL="apk update; apk add --no-cache chromium chromium-chromedriver; export PANTHER_CHROME_DRIVER_BINARY=/usr/lib/chromium/chromedriver"
      script:
        - failJob=false
        - *dockers_env_start
        - *composer_github_auth
        - *main_build
        - *ccda_build
        - *install_configure
        - *build_test_unit
        - *build_test_e2e
        - *build_test_api
        - *build_test_fixtures
        - *build_test_services
        - *build_test_validators
        - *build_test_controllers
        - *build_test_common
        - *job_summary_prep
        - echo -e "${jobSummary}"
        - if $failJob; then travis_terminate 1; fi
    - name: 'Build and test - PHP 7.3 - Apache - MariaDB 10.3'
      php: '7.3'
      env:
        - DOCKER_DIR=apache_73_103
        - OPENEMR_DIR=/var/www/localhost/htdocs/openemr
        - CHROMIUM_INSTALL="apk update; apk add --no-cache chromium chromium-chromedriver; export PANTHER_CHROME_DRIVER_BINARY=/usr/lib/chromium/chromedriver"
      script:
        - failJob=false
        - *dockers_env_start
        - *composer_github_auth
        - *main_build
        - *ccda_build
        - *install_configure
        - *build_test_unit
        - *build_test_e2e
        - *build_test_api
        - *build_test_fixtures
        - *build_test_services
        - *build_test_validators
        - *build_test_controllers
        - *build_test_common
        - *job_summary_prep
        - echo -e "${jobSummary}"
        - if $failJob; then travis_terminate 1; fi
    - name: 'Build and test - PHP 7.3 - Apache - MariaDB 10.2'
      php: '7.3'
      env:
        - DOCKER_DIR=apache_73_102
        - OPENEMR_DIR=/var/www/localhost/htdocs/openemr
        - CHROMIUM_INSTALL="apk update; apk add --no-cache chromium chromium-chromedriver; export PANTHER_CHROME_DRIVER_BINARY=/usr/lib/chromium/chromedriver"
      script:
        - failJob=false
        - *dockers_env_start
        - *composer_github_auth
        - *main_build
        - *ccda_build
        - *install_configure
        - *build_test_unit
        - *build_test_e2e
        - *build_test_api
        - *build_test_fixtures
        - *build_test_services
        - *build_test_validators
        - *build_test_controllers
        - *build_test_common
        - *job_summary_prep
        - echo -e "${jobSummary}"
        - if $failJob; then travis_terminate 1; fi
    - name: 'Build and test - PHP 7.3 - Apache - MariaDB 10.1'
      php: '7.3'
      env:
        - DOCKER_DIR=apache_73_101
        - OPENEMR_DIR=/var/www/localhost/htdocs/openemr
        - CHROMIUM_INSTALL="apk update; apk add --no-cache chromium chromium-chromedriver; export PANTHER_CHROME_DRIVER_BINARY=/usr/lib/chromium/chromedriver"
      script:
        - failJob=false
        - *dockers_env_start
        - *composer_github_auth
        - *main_build
        - *ccda_build
        - *install_configure
        - *build_test_unit
        - *build_test_e2e
        - *build_test_api
        - *build_test_fixtures
        - *build_test_services
        - *build_test_validators
        - *build_test_controllers
        - *build_test_common
        - *job_summary_prep
        - echo -e "${jobSummary}"
        - if $failJob; then travis_terminate 1; fi
    - name: 'Build and test - PHP 7.3 - Apache - MySQL 8'
      php: '7.3'
      env:
        - DOCKER_DIR=apache_73_8
        - OPENEMR_DIR=/var/www/localhost/htdocs/openemr
        - CHROMIUM_INSTALL="apk update; apk add --no-cache chromium chromium-chromedriver; export PANTHER_CHROME_DRIVER_BINARY=/usr/lib/chromium/chromedriver"
      script:
        - failJob=false
        - *dockers_env_start
        - *composer_github_auth
        - *main_build
        - *ccda_build
        - *install_configure
        - *build_test_unit
        - *build_test_e2e
        - *build_test_api
        - *build_test_fixtures
        - *build_test_services
        - *build_test_validators
        - *build_test_controllers
        - *build_test_common
        - *job_summary_prep
        - echo -e "${jobSummary}"
        - if $failJob; then travis_terminate 1; fi
    - name: 'Build and test - PHP 7.3 - Apache - MySQL 5.7'
      php: '7.3'
      env:
        - DOCKER_DIR=apache_73_57
        - OPENEMR_DIR=/var/www/localhost/htdocs/openemr
        - CHROMIUM_INSTALL="apk update; apk add --no-cache chromium chromium-chromedriver; export PANTHER_CHROME_DRIVER_BINARY=/usr/lib/chromium/chromedriver"
      script:
        - failJob=false
        - *dockers_env_start
        - *composer_github_auth
        - *main_build
        - *ccda_build
        - *install_configure
        - *build_test_unit
        - *build_test_e2e
        - *build_test_api
        - *build_test_fixtures
        - *build_test_services
        - *build_test_validators
        - *build_test_controllers
        - *build_test_common
        - *job_summary_prep
        - echo -e "${jobSummary}"
        - if $failJob; then travis_terminate 1; fi
    - name: 'Build and test - PHP 7.3 - Apache - MySQL 5.6'
      php: '7.3'
      env:
        - DOCKER_DIR=apache_73_56
        - OPENEMR_DIR=/var/www/localhost/htdocs/openemr
        - CHROMIUM_INSTALL="apk update; apk add --no-cache chromium chromium-chromedriver; export PANTHER_CHROME_DRIVER_BINARY=/usr/lib/chromium/chromedriver"
      script:
        - failJob=false
        - *dockers_env_start
        - *composer_github_auth
        - *main_build
        - *ccda_build
        - *install_configure
        - *build_test_unit
        - *build_test_e2e
        - *build_test_api
        - *build_test_fixtures
        - *build_test_services
        - *build_test_validators
        - *build_test_controllers
        - *build_test_common
        - *job_summary_prep
        - echo -e "${jobSummary}"
        - if $failJob; then travis_terminate 1; fi
    - name: 'Build and test - PHP 7.2 - Nginx - MariaDB 10.4'
      php: '7.2'
      env:
        - DOCKER_DIR=nginx_72
        - OPENEMR_DIR=/usr/share/nginx/html/openemr
        - CHROMIUM_INSTALL="apt-get update; apt-get install -y zip libnss3 chromium"
      script:
        - failJob=false
        - *dockers_env_start
        - *composer_github_auth
        - *main_build
        - *ccda_build
        - *install_configure
        - *build_test_unit
        - *build_test_e2e
        - *build_test_fixtures
        - *build_test_services
        - *build_test_validators
        - *build_test_controllers
        - *build_test_common
        - *job_summary_prep
        - echo -e "${jobSummary}"
        - if $failJob; then travis_terminate 1; fi
    - name: 'Build and test - PHP 7.3 - Nginx - MariaDB 10.4'
      php: '7.3'
      env:
        - DOCKER_DIR=nginx_73
        - OPENEMR_DIR=/usr/share/nginx/html/openemr
        - CHROMIUM_INSTALL="apt-get update; apt-get install -y zip libnss3 chromium"
      script:
        - failJob=false
        - *dockers_env_start
        - *composer_github_auth
        - *main_build
        - *ccda_build
        - *install_configure
        - *build_test_unit
        - *build_test_e2e
        - *build_test_fixtures
        - *build_test_services
        - *build_test_validators
        - *build_test_controllers
        - *build_test_common
        - *job_summary_prep
        - echo -e "${jobSummary}"
        - if $failJob; then travis_terminate 1; fi
    - name: 'Build and test - PHP 7.4 - Nginx - MariaDB 10.4'
      php: '7.4'
      env:
        - DOCKER_DIR=nginx_74
        - OPENEMR_DIR=/usr/share/nginx/html/openemr
        - CHROMIUM_INSTALL="apt-get update; apt-get install -y zip libnss3 chromium"
      script:
        - failJob=false
        - *dockers_env_start
        - *composer_github_auth
        - *main_build
        - *ccda_build
        - *install_configure
        - *build_test_unit
        - *build_test_e2e
        - *build_test_fixtures
        - *build_test_services
        - *build_test_validators
        - *build_test_controllers
        - *build_test_common
        - *job_summary_prep
        - echo -e "${jobSummary}"
        - if $failJob; then travis_terminate 1; fi
    - name: 'Build and test - PHP 8.0 - Nginx - MariaDB 10.4'
      php: 'nightly'
      env:
        - DOCKER_DIR=nginx_80
        - OPENEMR_DIR=/usr/share/nginx/html/openemr
        - CHROMIUM_INSTALL="apt-get update; apt-get install -y zip libnss3 chromium"
      script:
        - failJob=false
        - *dockers_env_start
        - *composer_github_auth
        - *main_build
        - *ccda_build
        - *install_configure
        - *build_test_unit
        - *build_test_e2e
        - *build_test_fixtures
        - *build_test_services
        - *build_test_validators
        - *build_test_controllers
        - *build_test_common
        - *job_summary_prep
        - echo -e "${jobSummary}"
        - if $failJob; then travis_terminate 1; fi
  allow_failures:
    - name: 'Build and test - PHP 7.3 - Apache - MariaDB 10.5'
    - name: 'Syntax - PHP 8.0'
    - name: 'Build and test - PHP 8.0 - Nginx - MariaDB 10.4'