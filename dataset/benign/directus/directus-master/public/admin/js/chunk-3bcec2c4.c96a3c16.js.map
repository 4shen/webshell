{"version":3,"sources":["webpack:///./src/interfaces/key-value/input.vue?a2d1","webpack:///src/interfaces/key-value/input.vue","webpack:///./src/interfaces/key-value/input.vue?5522","webpack:///./src/interfaces/key-value/input.vue","webpack:///./node_modules/@directus/extension-toolkit/mixins/interface.js"],"names":["render","_vm","this","_h","$createElement","_c","_self","attrs","name","id","formattedValue","length","readonly","required","repeaterOptions","newItem","relation","fields","collection","values","on","emitValue","staticRenderFns","component","module","exports","props","type","String","value","default","Number","Boolean","primaryKey","options","Object","width","val","includes"],"mappings":"yHAAA,IAAIA,EAAS,WAAa,IAAIC,EAAIC,KAASC,EAAGF,EAAIG,eAAmBC,EAAGJ,EAAIK,MAAMD,IAAIF,EAAG,OAAOE,EAAG,cAAc,CAACE,MAAM,CAAC,GAAK,WAAW,KAAO,OAAO,KAAON,EAAIO,KAAK,aAAaP,EAAIQ,GAAG,MAAQR,EAAIS,eAAe,OAAST,EAAIU,OAAO,SAAWV,EAAIW,SAAS,SAAWX,EAAIY,SAAS,QAAUZ,EAAIa,gBAAgB,WAAWb,EAAIc,QAAQ,SAAWd,EAAIe,SAAS,OAASf,EAAIgB,OAAO,WAAahB,EAAIiB,WAAW,OAASjB,EAAIkB,OAAO,MAAQ,QAAQC,GAAG,CAAC,MAAQnB,EAAIoB,cACvcC,EAAkB,G,+DCuBtB,GACA,aACA,UACA,gBADA,WAEA,OACA,QACA,CACA,YACA,oCACA,gCACA,0BACA,cAEA,CACA,cACA,sCACA,kCACA,4BACA,iBAKA,eArBA,WAqBA,WACA,8BAEA,gDACA,MACA,uBAIA,SACA,UADA,SACA,GACA,YACA,6BACA,CACA,SACA,8DACA,0BC/D8V,I,YCO1VC,EAAY,eACd,EACAvB,EACAsB,GACA,EACA,KACA,KACA,MAIa,aAAAC,E,8BClBfC,EAAOC,QAAU,CACfC,MAAO,CAILjB,GAAI,CACFkB,KAAMC,OACNf,UAAU,GAGZL,KAAM,CACJmB,KAAMC,OACNf,UAAU,GAIZgB,MAAO,CACLF,KAAM,KACNG,QAAS,MAGXH,KAAM,CACJA,KAAMC,OACNf,UAAU,GAGZF,OAAQ,CACNgB,KAAM,CAACC,OAAQG,QACfD,QAAS,MAGXlB,SAAU,CACRe,KAAMK,QACNF,SAAS,GAGXZ,WAAY,CACVS,KAAMC,OACNE,QAAS,MAGXG,WAAY,CACVN,KAAM,CAACI,OAAQH,QACfE,QAAS,MAGXjB,SAAU,CACRc,KAAMK,QACNF,SAAS,GAGXI,QAAS,CACPP,KAAMQ,OACNL,QAAS,KAAM,KAGjBf,QAAS,CACPY,KAAMK,QACNF,SAAS,GAIXd,SAAU,CACRW,KAAMQ,OACNL,QAAS,MAGXb,OAAQ,CACNU,KAAMQ,OACNL,QAAS,MAIXX,OAAQ,CACNQ,KAAMQ,OACNL,QAAS,MAEXM,MAAO,CACLT,KAAMC,OACNE,QAAS,KACT,UAAUO,GACR,MAAO,CACL,OACA,YACA,aACA,OACA,QACAC,SAASD","file":"js/chunk-3bcec2c4.c96a3c16.js","sourcesContent":["var render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('v-ext-input',{attrs:{\"id\":\"repeater\",\"type\":\"json\",\"name\":_vm.name,\"input-name\":_vm.id,\"value\":_vm.formattedValue,\"length\":_vm.length,\"readonly\":_vm.readonly,\"required\":_vm.required,\"options\":_vm.repeaterOptions,\"new-item\":_vm.newItem,\"relation\":_vm.relation,\"fields\":_vm.fields,\"collection\":_vm.collection,\"values\":_vm.values,\"width\":\"full\"},on:{\"input\":_vm.emitValue}})}\nvar staticRenderFns = []\n\nexport { render, staticRenderFns }","<template>\n\t<v-ext-input\n\t\tid=\"repeater\"\n\t\ttype=\"json\"\n\t\t:name=\"name\"\n\t\t:input-name=\"id\"\n\t\t:value=\"formattedValue\"\n\t\t:length=\"length\"\n\t\t:readonly=\"readonly\"\n\t\t:required=\"required\"\n\t\t:options=\"repeaterOptions\"\n\t\t:new-item=\"newItem\"\n\t\t:relation=\"relation\"\n\t\t:fields=\"fields\"\n\t\t:collection=\"collection\"\n\t\t:values=\"values\"\n\t\twidth=\"full\"\n\t\t@input=\"emitValue\"\n\t/>\n</template>\n\n<script>\nimport mixin from '@directus/extension-toolkit/mixins/interface';\n\nexport default {\n\tmixins: [mixin],\n\tcomputed: {\n\t\trepeaterOptions() {\n\t\t\treturn {\n\t\t\t\tfields: [\n\t\t\t\t\t{\n\t\t\t\t\t\tfield: 'key',\n\t\t\t\t\t\tinterface: this.options.keyInterface,\n\t\t\t\t\t\toptions: this.options.keyOptions,\n\t\t\t\t\t\ttype: this.options.keyType,\n\t\t\t\t\t\twidth: 'half'\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tfield: 'value',\n\t\t\t\t\t\tinterface: this.options.valueInterface,\n\t\t\t\t\t\toptions: this.options.valueOptions,\n\t\t\t\t\t\ttype: this.options.valueType,\n\t\t\t\t\t\twidth: 'half'\n\t\t\t\t\t}\n\t\t\t\t]\n\t\t\t};\n\t\t},\n\t\tformattedValue() {\n\t\t\tif (this.value === null) return null;\n\n\t\t\treturn Object.keys(this.value).map(key => ({\n\t\t\t\tkey,\n\t\t\t\tvalue: this.value[key]\n\t\t\t}));\n\t\t}\n\t},\n\tmethods: {\n\t\temitValue(value) {\n\t\t\tif (value === null) {\n\t\t\t\tthis.$emit('input', null);\n\t\t\t} else {\n\t\t\t\tconst formattedValue = {};\n\t\t\t\tvalue.forEach(({ key, value }) => (formattedValue[key] = value));\n\t\t\t\tthis.$emit('input', formattedValue);\n\t\t\t}\n\t\t}\n\t}\n};\n</script>\n","import mod from \"-!../../../node_modules/cache-loader/dist/cjs.js??ref--12-0!../../../node_modules/thread-loader/dist/cjs.js!../../../node_modules/babel-loader/lib/index.js!../../../node_modules/cache-loader/dist/cjs.js??ref--0-0!../../../node_modules/vue-loader/lib/index.js??vue-loader-options!./input.vue?vue&type=script&lang=js&\"; export default mod; export * from \"-!../../../node_modules/cache-loader/dist/cjs.js??ref--12-0!../../../node_modules/thread-loader/dist/cjs.js!../../../node_modules/babel-loader/lib/index.js!../../../node_modules/cache-loader/dist/cjs.js??ref--0-0!../../../node_modules/vue-loader/lib/index.js??vue-loader-options!./input.vue?vue&type=script&lang=js&\"","import { render, staticRenderFns } from \"./input.vue?vue&type=template&id=20caa86a&\"\nimport script from \"./input.vue?vue&type=script&lang=js&\"\nexport * from \"./input.vue?vue&type=script&lang=js&\"\n\n\n/* normalize component */\nimport normalizer from \"!../../../node_modules/vue-loader/lib/runtime/componentNormalizer.js\"\nvar component = normalizer(\n  script,\n  render,\n  staticRenderFns,\n  false,\n  null,\n  null,\n  null\n  \n)\n\nexport default component.exports","module.exports = {\n  props: {\n    // Unique id for this interface. Should be added to the lower level \n    // HTML input element if applicable. This ID will be used in the label's\n    // `for` attribute\n    id: {\n      type: String,\n      required: true\n    },\n    // Name of the field\n    name: {\n      type: String,\n      required: true\n    },\n    // The current value. This can either be the default value, the saved database\n    // value or the current state after the user made an edit\n    value: {\n      type: null,\n      default: null\n    },\n    // Type of the field, eg `string`, `hash`, or `array`\n    type: {\n      type: String,\n      required: true\n    },\n    // Max length\n    length: {\n      type: [String, Number],\n      default: null\n    },\n    // If the field is readonly or not\n    readonly: {\n      type: Boolean,\n      default: false\n    },\n    // Name of the collection\n    collection: {\n      type: String,\n      default: null\n    },\n    // Primary key of the item you're editing in this context\n    primaryKey: {\n      type: [Number, String],\n      default: null\n    },\n    // If the field is required or not\n    required: {\n      type: Boolean,\n      default: false\n    },\n    // Field options. A json object based on the interface's meta.json file\n    options: {\n      type: Object,\n      default: () => ({})\n    },\n    // If the item that's currently being edited is new\n    newItem: {\n      type: Boolean,\n      default: false\n    },\n    // The relation of the current field. Will contain information on the related\n    // collection and field(s)\n    relation: {\n      type: Object,\n      default: null\n    },\n    // The other fields in the current edit page\n    fields: {\n      type: Object,\n      default: null\n    },\n    // The values of the other fields on the edit page. Can be used for things like\n    // automatically generating a slug based on another field\n    values: {\n      type: Object,\n      default: null\n    },\n    width: {\n      type: String,\n      default: null,\n      validator(val) {\n        return [\n          'half',\n          'half-left',\n          'half-right',\n          'full',\n          'fill'\n        ].includes(val);\n      }\n    }\n  }\n};\n"],"sourceRoot":""}