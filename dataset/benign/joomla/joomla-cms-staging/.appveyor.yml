build: false
platform:
  - x64
clone_folder: C:\projects\joomla-cms

branches:
  except:
    - /l10n_*/

## Build matrix for lowest and highest possible targets
environment:
  DLLVersion: "5.8.0"
  PHPBuild: "x64"
  VC: "vc15"
  matrix:
  - php_ver_target: 5.6
    PHPBuild: "x86"
    VC: "vc11"
    WINCACHE: "1.3.7.12"
  - php_ver_target: 7.0
    DLLVersion: "5.3.0"
    VC: "vc14"
    WINCACHE: "2.0.0.8"
  - php_ver_target: 7.1
    DLLVersion: "5.3.0"
    VC: "vc14"
    WINCACHE: "2.0.0.8"
  - php_ver_target: 7.2
    DLLVersion: "5.3.0"
  - php_ver_target: 7.3
  - php_ver_target: 7.4

init:
  - SET PATH=C:\Program Files\OpenSSL;C:\tools\php;%PATH%
  - SET COMPOSER_NO_INTERACTION=1
  - SET PHP=1 # This var relates to caching the php install
  - SET ANSICON=121x90 (121x90)
services:
  - mssql2014
  - mysql
  - postgresql94
  - iis

## Install PHP and composer, and run the appropriate composer command
install:
    - IF EXIST C:\tools\php (SET PHP=0)
    # TODO: This is a workaround for https://github.com/chocolatey/choco/issues/1843. Once this is fixed we
    #       should go back to latest version in appveyor saving ourselves test time
    - ps: choco upgrade chocolatey -y --version 0.10.13 --allow-downgrade
    - ps: >-
        If ($env:php_ver_target -eq "5.6") {
          appveyor-retry cinst --params '""/InstallDir:C:\tools\php""' --ignore-checksums -y --forcex86 php --version ((choco search php --exact --all-versions -r | select-string -pattern $env:php_ver_target | sort { [version]($_ -split '\|' | select -last 1) } -Descending | Select-Object -first 1) -replace '[php|]','')
        } Else {
          appveyor-retry cinst --params '""/InstallDir:C:\tools\php""' --ignore-checksums -y php --version ((choco search php --exact --all-versions -r | select-string -pattern $env:php_ver_target | sort { [version]($_ -split '\|' | select -last 1) } -Descending | Select-Object -first 1) -replace '[php|]','')
        }
    - appveyor-retry cinst -y sqlite
    - cd C:\tools\php
    # Get the MSSQL DLL's
    - ps: >-
        If ($env:PHP -eq "1") {
          If ($env:php_ver_target -eq "5.6") {
            $source = "https://cdn.joomla.org/ci/php-sqlsrv.zip"
            $destination = "c:\tools\php\php-sqlsrv.zip"
            Invoke-WebRequest $source -OutFile $destination
            #appveyor-retry appveyor DownloadFile https://cdn.joomla.org/ci/php-sqlsrv.zip
            7z x -y php-sqlsrv.zip > $null
            copy SQLSRV\php_sqlsrv_56_nts.dll ext\php_sqlsrv_nts.dll
            copy SQLSRV\php_pdo_sqlsrv_56_nts.dll ext\php_pdo_sqlsrv_nts.dll
            Remove-Item C:\tools\php\* -include .zip
          } Else {
            cd c:\tools\php\ext
            $source = "https://windows.php.net/downloads/pecl/releases/sqlsrv/$($env:DLLVersion)/php_sqlsrv-$($env:DLLVersion)-$($env:php_ver_target)-nts-$($env:VC)-$($env:PHPBuild).zip"
            $destination = "c:\tools\php\ext\php_sqlsrv-$($env:DLLVersion)-$($env:php_ver_target)-nts-$($env:VC)-$($env:PHPBuild).zip"
            Invoke-WebRequest $source -OutFile $destination
            #appveyor-retry appveyor DownloadFile https://windows.php.net/downloads/pecl/releases/sqlsrv/$($env:DLLVersion)/php_sqlsrv-$($env:DLLVersion)-$($env:php_ver_target)-nts-$($env:VC)-$($env:PHPBuild).zip
            7z x -y php_sqlsrv-$($env:DLLVersion)-$($env:php_ver_target)-nts-$($env:VC)-$($env:PHPBuild).zip > $null
            $source = "https://windows.php.net/downloads/pecl/releases/pdo_sqlsrv/$($env:DLLVersion)/php_pdo_sqlsrv-$($env:DLLVersion)-$($env:php_ver_target)-nts-$($env:VC)-$($env:PHPBuild).zip"
            $destination = "c:\tools\php\ext\php_pdo_sqlsrv-$($env:DLLVersion)-$($env:php_ver_target)-nts-$($env:VC)-$($env:PHPBuild).zip"
            Invoke-WebRequest $source -OutFile $destination
            #appveyor-retry appveyor DownloadFile https://windows.php.net/downloads/pecl/releases/pdo_sqlsrv/$($env:DLLVersion)/php_pdo_sqlsrv-$($env:DLLVersion)-$($env:php_ver_target)-nts-$($env:VC)-$($env:PHPBuild).zip
            7z x -y php_pdo_sqlsrv-$($env:DLLVersion)-$($env:php_ver_target)-nts-$($env:VC)-$($env:PHPBuild).zip > $null
            Remove-Item c:\tools\php\ext* -include .zip
            cd c:\tools\php
          }
        }
    - IF %PHP%==1 copy php.ini-production php.ini /Y
    - IF %PHP%==1 echo date.timezone="UTC" >> php.ini
    - IF %PHP%==1 echo extension_dir=ext >> php.ini
    - IF %PHP%==1 echo extension=php_openssl.dll >> php.ini
    - IF %PHP%==1 echo extension=php_mbstring.dll >> php.ini
    - IF %PHP%==1 echo extension=php_fileinfo.dll >> php.ini
    - IF %PHP%==1 echo extension=php_gd2.dll >> php.ini
    - ps: >-
        If ($env:php_ver_target -eq "5.6") {
          Add-Content php.ini "`nextension=php_sqlsrv_nts.dll"
          Add-Content php.ini "`nextension=php_pdo_sqlsrv_nts.dll"
          Add-Content php.ini "`n"
        } Else {
          Add-Content php.ini "`nextension=php_sqlsrv.dll"
          Add-Content php.ini "`nextension=php_pdo_sqlsrv.dll"
          Add-Content php.ini "`n"
        }
    - IF %PHP%==1 echo extension=php_pgsql.dll >> php.ini
    - IF %PHP%==1 echo extension=php_pdo_pgsql.dll >> php.ini
    - IF %PHP%==1 echo extension=php_pdo_sqlite.dll >> php.ini
    - IF %PHP%==1 echo extension=php_sqlite3.dll >> php.ini
    - IF %PHP%==1 echo extension=php_pdo_mysql.dll >> php.ini
    - IF %PHP%==1 echo extension=php_mysqli.dll >> php.ini
    - IF %PHP_VER_TARGET%==5.6 IF %PHP%==1 echo extension=php_mysql.dll >> php.ini
    - IF %PHP%==1 echo extension=php_curl.dll >> php.ini
    # Get the Wincache DLLs
    - ps: >-
        If ($env:PHP -eq "1" -and $env:WINCACHE) {
          cd c:\tools\php\ext
          $source = "https://windows.php.net/downloads/pecl/releases/wincache/$($env:WINCACHE)/php_wincache-$($env:WINCACHE)-$($env:php_ver_target)-nts-$($env:VC)-$($env:PHPBuild).zip"
          $destination = "c:\tools\php\ext\php_wincache-$($env:WINCACHE)-$($env:php_ver_target)-nts-$($env:VC)-$($env:PHPBuild).zip"
          Invoke-WebRequest $source -OutFile $destination
          #appveyor-retry appveyor DownloadFile https://windows.php.net/downloads/pecl/releases/wincache/$($env:WINCACHE)/php_wincache-$($env:WINCACHE)-$($env:php_ver_target)-nts-$($env:VC)-$($env:PHPBuild).zip
          7z x -y php_wincache-$($env:WINCACHE)-$($env:php_ver_target)-nts-$($env:VC)-$($env:PHPBuild).zip > $null
          Remove-Item C:\tools\php\ext* -include .zip
          cd c:\tools\php
          Add-Content php.ini "`nextension=php_wincache.dll"
          Add-Content php.ini "`wincache.enablecli = 1"
          Add-Content php.ini "`n"
        }
    - IF %PHP%==1 echo zend_extension=php_opcache.dll >> php.ini
    - IF %PHP%==1 echo opcache.enable_cli=1 >> php.ini
    - IF %PHP%==1 echo extension=php_ldap.dll >> php.ini
    - IF %PHP%==1 echo @php %%~dp0composer.phar %%* > composer.bat
    - IF %PHP%==1 php -r "readfile('http://getcomposer.org/installer');" | php
    - cd C:\projects\joomla-cms
    - appveyor-retry composer install --no-progress --profile

before_test:
#  Database setup for MySQL via PowerShell tools
  - >
    "C:\Program Files\MySQL\MySQL Server 5.7\bin\mysql" -u root -p"Password12!" -e "CREATE DATABASE IF NOT EXISTS joomla_ut;"
  - >
    "C:\Program Files\MySQL\MySQL Server 5.7\bin\mysql" -u root -p"Password12!" joomla_ut < tests\unit\schema\mysql.sql

#  Database setup for PostgreSQL
  - SET PGUSER=postgres
  - SET PGPASSWORD=Password12!
  - PATH=C:\Program Files\PostgreSQL\9.4\bin\;%PATH%
  - createdb joomla_ut
  - psql -d joomla_ut -a -f tests\unit\schema\postgresql.sql

# Database setup for SQL Server
  - ps: $sqlInstance = "(local)\SQL2014"
  - ps: sqlcmd -b -E -S "$sqlInstance" -Q "CREATE DATABASE joomla_ut"
  - ps: sqlcmd -S "$sqlInstance" -U "sa" -P "Password12!" -i $env:APPVEYOR_BUILD_FOLDER\tests\unit\schema\sqlsrv.sql

test_script:
  - cd C:\projects\joomla-cms
  - ps: If ($env:php_ver_target -eq "5.6") {libraries/vendor/bin/phpunit -c appveyor-phpunit.xml --exclude-group not-on-windows } Else {libraries/vendor/bin/phpunit -c appveyor-phpunit.xml}
